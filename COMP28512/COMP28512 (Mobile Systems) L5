COMP28512 (Mobile Systems) L5

Task 5.1

Development

In order to allow the client to support the items required for this lab exercise, I developed an additional thread to run alongside the ServerConnect, called ChannelConnect. This class implemented handling for all of the possible things to be sent on this channel, including FEC, CRC and Encryption aswell as the abilty to handle normal messages.

To handle ascii bits, strings were taken from the text box, converted to an array and then converted to ascii. Afterwards the ascii values were converted to binary where they would then be brought together as a string again before being sent to barrybot with an error value.


Task 5.2

Development

Once the ASCII solution had been developed I was able to test it with BarryBot's varying error rates.

Question: Comment on what you receive back.

When testing the varying error rates, 0 returned no bit errors what so ever as expected. 
1 Did make a minor error in the conversion however this was only in a handful of the test cases.
2 Did also make a minor error in the conversion however it was more frequent than 1. 
3 on the other hand pretty much always made an error in the test cases.

Task 5.3

Development

In order to introduce CRC to the system I converted the code used in the ipython labs so that it would work in the java program. I also implemented a button to allow messages to be sent using CRC. Once a message was to be sent using CRC the CRC 8 value was calculated and appended, when it was then recieved by the system it would be stripped and recalculated, if there was an error the system would print this out to the user, along with the dodgy message.

Question: Record how many retransmissions might be needed on average.

To test the number of retransmissions required I used a short message which may be typical of a instant messaging service. I sent the message 10 times to check how many errors were received.

1: On average a retransmission would be required once per 10 messages 1/10 of the time.
2: On average a retransmission would be required about half the time 5/10.

Task 5.4

Development

To enable my client to decrypt the messages from BarryBot I developed a method of searching for the most repeated phrase. I found during my tests that it was possible for barrybot to repeat the same "random" phrase on more than one occation. As a result of this I implemented a ranking system which waits until one message has five repetitions, this takes slightly longer but very rarely returns an incorrect key. The key is then xor compared whenever the ENC button is pressed to decode the message.

Question: Who is the author of the text?

The repeated message is: Sent by BarryBot, School of Computer Science, The University of Manchester

The random phrases are about the University of Manchester, including some brief history.

I cannot find an mentioned author in any of the decrypted messages??

Task 5.5

Development

Enabling FEC to work was a simple case of sending 3 identical messages to BarryBot and waiting for three responses. The bit's were then compared on reciept and a mini election was held to determine which value the bit should take. The output was then printed to the chat window.

Question: How many retransmissions might be needed on average.

0: No errors on this rate, FEC would have little effect other than making transmissions slower.

1: On average I found that FEC corrected the issues generated by BarryBot effectively around 99% of the time thus only about 1% would need to be retransmissions.

2: FEC was also fairly efficent of correcting issues caused by this level of error rate. Only about 5% of the errors managed to pass through the correction protocol.

Task 5.6

I did not attempt this task as I felt the requirements would take too long to implement relevant to the amount of marks avaliable at this stage of the semester.